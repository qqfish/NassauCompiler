/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. nassauToken.jj */
/*@egen*/options {
	           
	                        
}

PARSER_BEGIN(NassauToken)

/** An Arithmetic Grammar. */
public class NassauToken/*@bgen(jjtree)*/implements NassauTokenTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTNassauTokenState jjtree = new JJTNassauTokenState();

/*@egen*/
	/** Main entry point. */
	public static void main(String args[]) {
		System.out.println("Reading from standard input...");
		NassauToken t = new NassauToken(System.in);
		try {
			ASTStart n = t.Start();
			n.dump("");
			System.out.println("Thank you.");
		} catch (Exception e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}
}

PARSER_END(NassauToken)


SKIP :
{
	" "
	| "\r"
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ELIF: "elif">
| < FALSE: "false" >
| < FLOAT: "float" >
| < FOR: "for" >
| < IF: "if" >
| < IMPLEMENT: "implement" >
| < IMPORT: "import" >
| < INT: "int" >
| < LONG: "long" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < THIS: "this" >
| < TRUE: "true" >
| < VOID: "void" >
| < WHILE: "while" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
  	(TokenUnit())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TokenUnit()       : {}
{
	BOOLEAN()
	| BREAK()
	| BYTE()
	| CHAR()
	| CLASS()
	| CONST()
	| CONTINUE()
	| DO()
	| DOUBLE()
	| ELSE()
	| ELIF()
	| FALSE()
	| FLOAT()
	| FOR()
	| IF()
	| IMPLEMENT()
	| IMPORT()
	| INT()
	| LONG()
	| NEW()
	| NULL()
	| PACKAGE()
	| PRIVATE()
	| PUBLIC()
	| RETURN()
	| SHORT()
	| STATIC()
	| THIS()
	| TRUE()
	| VOID()
	| WHILE()
	| INTEGER_LITERAL()
	| FLOATING_POINT_LITERAL()
	| CHARACTER_LITERAL()
	| STRING_LITERAL()
	| IDENTIFIER()
	| LPAREN()
	| RPAREN()
	| LBRACE()
	| RBRACE()
	| LBRACKET()
	| RBRACKET()
	| SEMICOLON()
	| COMMA()
	| DOT()
	| ASSIGN()
	| GT()
	| LT()
	| BANG()
	| TILDE()
	| HOOK()
	| COLON()
	| EQ()
	| LE()
	| GE()
	| NE()
	| SC_OR()
	| SC_AND()
	| INCR()
	| DECR()
	| PLUS()
	| MINUS()
	| STAR()
	| SLASH()
	| BIT_AND()
	| BIT_OR()
	| XOR()
	| REM()
	| LSHIFT()
	| RSIGNEDSHIFT()
	| RUNSIGNEDSHIFT()
	| PLUSASSIGN()
	| MINUSASSIGN()
	| STARASSIGN()
	| SLASHASSIGN()
	| ANDASSIGN()
	| ORASSIGN()
	| XORASSIGN()
	| REMASSIGN()
	| LSHIFTASSIGN()
	| RSIGNEDSHIFTASSIGN()
	| RUNSIGNEDSHIFTASSIGN()
	| ENTER()
	| TAB()
}

void BOOLEAN() : {/*@bgen(jjtree) BOOLEAN */
  ASTBOOLEAN jjtn000 = new ASTBOOLEAN(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BOOLEAN */
        try {
/*@egen*/
	<BOOLEAN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BREAK() : {/*@bgen(jjtree) BREAK */
  ASTBREAK jjtn000 = new ASTBREAK(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BREAK */
        try {
/*@egen*/
	<BREAK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BYTE() : {/*@bgen(jjtree) BYTE */
  ASTBYTE jjtn000 = new ASTBYTE(JJTBYTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BYTE */
        try {
/*@egen*/
	<BYTE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CHAR() : {/*@bgen(jjtree) CHAR */
  ASTCHAR jjtn000 = new ASTCHAR(JJTCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CHAR */
        try {
/*@egen*/
	<CHAR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CLASS() : {/*@bgen(jjtree) CLASS */
  ASTCLASS jjtn000 = new ASTCLASS(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CLASS */
        try {
/*@egen*/
	<CLASS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CONST() : {/*@bgen(jjtree) CONST */
  ASTCONST jjtn000 = new ASTCONST(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONST */
        try {
/*@egen*/
	<CONST>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CONTINUE() : {/*@bgen(jjtree) CONTINUE */
  ASTCONTINUE jjtn000 = new ASTCONTINUE(JJTCONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONTINUE */
        try {
/*@egen*/
	<CONTINUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DO() : {/*@bgen(jjtree) DO */
  ASTDO jjtn000 = new ASTDO(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DO */
        try {
/*@egen*/
	<DO>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DOUBLE() : {/*@bgen(jjtree) DOUBLE */
  ASTDOUBLE jjtn000 = new ASTDOUBLE(JJTDOUBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DOUBLE */
        try {
/*@egen*/
	<DOUBLE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ELSE() : {/*@bgen(jjtree) ELSE */
  ASTELSE jjtn000 = new ASTELSE(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELSE */
        try {
/*@egen*/
	<ELSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ELIF() : {/*@bgen(jjtree) ELIF */
  ASTELIF jjtn000 = new ASTELIF(JJTELIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELIF */
        try {
/*@egen*/
	<ELIF>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FALSE() : {/*@bgen(jjtree) FALSE */
  ASTFALSE jjtn000 = new ASTFALSE(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FALSE */
        try {
/*@egen*/
	<FALSE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FLOAT() : {/*@bgen(jjtree) FLOAT */
  ASTFLOAT jjtn000 = new ASTFLOAT(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FLOAT */
        try {
/*@egen*/
	<FLOAT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FOR() : {/*@bgen(jjtree) FOR */
  ASTFOR jjtn000 = new ASTFOR(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FOR */
        try {
/*@egen*/
	<FOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IF() : {/*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
        try {
/*@egen*/
	<IF>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IMPLEMENT() : {/*@bgen(jjtree) IMPLEMENT */
  ASTIMPLEMENT jjtn000 = new ASTIMPLEMENT(JJTIMPLEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IMPLEMENT */
        try {
/*@egen*/
	<IMPLEMENT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IMPORT() : {/*@bgen(jjtree) IMPORT */
  ASTIMPORT jjtn000 = new ASTIMPORT(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IMPORT */
        try {
/*@egen*/
	<IMPORT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void INT() : {/*@bgen(jjtree) INT */
  ASTINT jjtn000 = new ASTINT(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INT */
        try {
/*@egen*/
	<INT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LONG() : {/*@bgen(jjtree) LONG */
  ASTLONG jjtn000 = new ASTLONG(JJTLONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LONG */
        try {
/*@egen*/
	<LONG>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NEW() : {/*@bgen(jjtree) NEW */
  ASTNEW jjtn000 = new ASTNEW(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NEW */
        try {
/*@egen*/
	<NEW>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NULL() : {/*@bgen(jjtree) NULL */
  ASTNULL jjtn000 = new ASTNULL(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NULL */
        try {
/*@egen*/
	<NULL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PACKAGE() : {/*@bgen(jjtree) PACKAGE */
  ASTPACKAGE jjtn000 = new ASTPACKAGE(JJTPACKAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PACKAGE */
        try {
/*@egen*/
	<PACKAGE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PRIVATE() : {/*@bgen(jjtree) PRIVATE */
  ASTPRIVATE jjtn000 = new ASTPRIVATE(JJTPRIVATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PRIVATE */
        try {
/*@egen*/
	<PRIVATE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PUBLIC() : {/*@bgen(jjtree) PUBLIC */
  ASTPUBLIC jjtn000 = new ASTPUBLIC(JJTPUBLIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PUBLIC */
        try {
/*@egen*/
	<PUBLIC>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RETURN() : {/*@bgen(jjtree) RETURN */
  ASTRETURN jjtn000 = new ASTRETURN(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RETURN */
        try {
/*@egen*/
	<RETURN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SHORT() : {/*@bgen(jjtree) SHORT */
  ASTSHORT jjtn000 = new ASTSHORT(JJTSHORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SHORT */
        try {
/*@egen*/
	<SHORT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void STATIC() : {/*@bgen(jjtree) STATIC */
  ASTSTATIC jjtn000 = new ASTSTATIC(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STATIC */
        try {
/*@egen*/
	<STATIC>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void THIS() : {/*@bgen(jjtree) THIS */
  ASTTHIS jjtn000 = new ASTTHIS(JJTTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) THIS */
        try {
/*@egen*/
	<THIS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TRUE() : {/*@bgen(jjtree) TRUE */
  ASTTRUE jjtn000 = new ASTTRUE(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TRUE */
        try {
/*@egen*/
	<TRUE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VOID(): {/*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VOID */
        try {
/*@egen*/
	<VOID>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WHILE() : {/*@bgen(jjtree) WHILE */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE */
        try {
/*@egen*/
	<WHILE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void INTEGER_LITERAL() : {/*@bgen(jjtree) INTEGER_LITERAL */
  ASTINTEGER_LITERAL jjtn000 = new ASTINTEGER_LITERAL(JJTINTEGER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INTEGER_LITERAL */
        try {
/*@egen*/
	<INTEGER_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FLOATING_POINT_LITERAL() : {/*@bgen(jjtree) FLOATING_POINT_LITERAL */
  ASTFLOATING_POINT_LITERAL jjtn000 = new ASTFLOATING_POINT_LITERAL(JJTFLOATING_POINT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FLOATING_POINT_LITERAL */
        try {
/*@egen*/
	<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CHARACTER_LITERAL() : {/*@bgen(jjtree) CHARACTER_LITERAL */
  ASTCHARACTER_LITERAL jjtn000 = new ASTCHARACTER_LITERAL(JJTCHARACTER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CHARACTER_LITERAL */
        try {
/*@egen*/
	<CHARACTER_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void STRING_LITERAL() : {/*@bgen(jjtree) STRING_LITERAL */
  ASTSTRING_LITERAL jjtn000 = new ASTSTRING_LITERAL(JJTSTRING_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STRING_LITERAL */
        try {
/*@egen*/
	<STRING_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IDENTIFIER() : {/*@bgen(jjtree) IDENTIFIER */
  ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDENTIFIER */
        try {
/*@egen*/
	<IDENTIFIER>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LPAREN() : {/*@bgen(jjtree) LPAREN */
  ASTLPAREN jjtn000 = new ASTLPAREN(JJTLPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LPAREN */
        try {
/*@egen*/
	<LPAREN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RPAREN() : {/*@bgen(jjtree) RPAREN */
  ASTRPAREN jjtn000 = new ASTRPAREN(JJTRPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RPAREN */
        try {
/*@egen*/
	<RPAREN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LBRACE() : {/*@bgen(jjtree) LBRACE */
  ASTLBRACE jjtn000 = new ASTLBRACE(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LBRACE */
        try {
/*@egen*/
	<LBRACE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RBRACE() : {/*@bgen(jjtree) RBRACE */
  ASTRBRACE jjtn000 = new ASTRBRACE(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RBRACE */
        try {
/*@egen*/
	<RBRACE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LBRACKET() : {/*@bgen(jjtree) LBRACKET */
  ASTLBRACKET jjtn000 = new ASTLBRACKET(JJTLBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LBRACKET */
        try {
/*@egen*/
	<LBRACKET>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RBRACKET() : {/*@bgen(jjtree) RBRACKET */
  ASTRBRACKET jjtn000 = new ASTRBRACKET(JJTRBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RBRACKET */
        try {
/*@egen*/
	<RBRACKET>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SEMICOLON() : {/*@bgen(jjtree) SEMICOLON */
  ASTSEMICOLON jjtn000 = new ASTSEMICOLON(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SEMICOLON */
        try {
/*@egen*/
	<SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void COMMA() : {/*@bgen(jjtree) COMMA */
  ASTCOMMA jjtn000 = new ASTCOMMA(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COMMA */
        try {
/*@egen*/
	<COMMA>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DOT() : {/*@bgen(jjtree) DOT */
  ASTDOT jjtn000 = new ASTDOT(JJTDOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DOT */
        try {
/*@egen*/
	<DOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ASSIGN() : {/*@bgen(jjtree) ASSIGN */
  ASTASSIGN jjtn000 = new ASTASSIGN(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ASSIGN */
        try {
/*@egen*/
	<ASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GT() : {/*@bgen(jjtree) GT */
  ASTGT jjtn000 = new ASTGT(JJTGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GT */
        try {
/*@egen*/
	<GT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LT() : {/*@bgen(jjtree) LT */
  ASTLT jjtn000 = new ASTLT(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LT */
        try {
/*@egen*/
	<LT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BANG() : {/*@bgen(jjtree) BANG */
  ASTBANG jjtn000 = new ASTBANG(JJTBANG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BANG */
        try {
/*@egen*/
	<BANG>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TILDE() : {/*@bgen(jjtree) TILDE */
  ASTTILDE jjtn000 = new ASTTILDE(JJTTILDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TILDE */
        try {
/*@egen*/
	<TILDE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HOOK() : {/*@bgen(jjtree) HOOK */
  ASTHOOK jjtn000 = new ASTHOOK(JJTHOOK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HOOK */
        try {
/*@egen*/
	<HOOK>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void COLON() : {/*@bgen(jjtree) COLON */
  ASTCOLON jjtn000 = new ASTCOLON(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) COLON */
        try {
/*@egen*/
	<COLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void EQ() : {/*@bgen(jjtree) EQ */
  ASTEQ jjtn000 = new ASTEQ(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EQ */
        try {
/*@egen*/
	<EQ>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LE() : {/*@bgen(jjtree) LE */
  ASTLE jjtn000 = new ASTLE(JJTLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LE */
        try {
/*@egen*/
	<LE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void GE() : {/*@bgen(jjtree) GE */
  ASTGE jjtn000 = new ASTGE(JJTGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) GE */
        try {
/*@egen*/
	<GE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NE() : {/*@bgen(jjtree) NE */
  ASTNE jjtn000 = new ASTNE(JJTNE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NE */
        try {
/*@egen*/
	<NE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SC_OR() : {/*@bgen(jjtree) SC_OR */
  ASTSC_OR jjtn000 = new ASTSC_OR(JJTSC_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SC_OR */
        try {
/*@egen*/
	<SC_OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SC_AND() : {/*@bgen(jjtree) SC_AND */
  ASTSC_AND jjtn000 = new ASTSC_AND(JJTSC_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SC_AND */
        try {
/*@egen*/
	<SC_AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void INCR() : {/*@bgen(jjtree) INCR */
  ASTINCR jjtn000 = new ASTINCR(JJTINCR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) INCR */
        try {
/*@egen*/
	<INCR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DECR() : {/*@bgen(jjtree) DECR */
  ASTDECR jjtn000 = new ASTDECR(JJTDECR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DECR */
        try {
/*@egen*/
	<DECR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PLUS() : {/*@bgen(jjtree) PLUS */
  ASTPLUS jjtn000 = new ASTPLUS(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PLUS */
        try {
/*@egen*/
	<PLUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MINUS() : {/*@bgen(jjtree) MINUS */
  ASTMINUS jjtn000 = new ASTMINUS(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MINUS */
        try {
/*@egen*/
	<MINUS>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void STAR() : {/*@bgen(jjtree) STAR */
  ASTSTAR jjtn000 = new ASTSTAR(JJTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STAR */
        try {
/*@egen*/
	<STAR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SLASH() : {/*@bgen(jjtree) SLASH */
  ASTSLASH jjtn000 = new ASTSLASH(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SLASH */
        try {
/*@egen*/
	<SLASH>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BIT_AND() : {/*@bgen(jjtree) BIT_AND */
  ASTBIT_AND jjtn000 = new ASTBIT_AND(JJTBIT_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BIT_AND */
        try {
/*@egen*/
	<BIT_AND>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void BIT_OR() : {/*@bgen(jjtree) BIT_OR */
  ASTBIT_OR jjtn000 = new ASTBIT_OR(JJTBIT_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BIT_OR */
        try {
/*@egen*/
	<BIT_OR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void XOR() : {/*@bgen(jjtree) XOR */
  ASTXOR jjtn000 = new ASTXOR(JJTXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XOR */
        try {
/*@egen*/
	<XOR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void REM() : {/*@bgen(jjtree) REM */
  ASTREM jjtn000 = new ASTREM(JJTREM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) REM */
        try {
/*@egen*/
	<REM>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LSHIFT() : {/*@bgen(jjtree) LSHIFT */
  ASTLSHIFT jjtn000 = new ASTLSHIFT(JJTLSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LSHIFT */
        try {
/*@egen*/
	<LSHIFT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RSIGNEDSHIFT() : {/*@bgen(jjtree) RSIGNEDSHIFT */
  ASTRSIGNEDSHIFT jjtn000 = new ASTRSIGNEDSHIFT(JJTRSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RSIGNEDSHIFT */
        try {
/*@egen*/
	<RSIGNEDSHIFT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RUNSIGNEDSHIFT() : {/*@bgen(jjtree) RUNSIGNEDSHIFT */
  ASTRUNSIGNEDSHIFT jjtn000 = new ASTRUNSIGNEDSHIFT(JJTRUNSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RUNSIGNEDSHIFT */
        try {
/*@egen*/
	<RUNSIGNEDSHIFT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PLUSASSIGN() : {/*@bgen(jjtree) PLUSASSIGN */
  ASTPLUSASSIGN jjtn000 = new ASTPLUSASSIGN(JJTPLUSASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PLUSASSIGN */
        try {
/*@egen*/
	<PLUSASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MINUSASSIGN() : {/*@bgen(jjtree) MINUSASSIGN */
  ASTMINUSASSIGN jjtn000 = new ASTMINUSASSIGN(JJTMINUSASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MINUSASSIGN */
        try {
/*@egen*/
	<MINUSASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void STARASSIGN() : {/*@bgen(jjtree) STARASSIGN */
  ASTSTARASSIGN jjtn000 = new ASTSTARASSIGN(JJTSTARASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STARASSIGN */
        try {
/*@egen*/
	<STARASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SLASHASSIGN() : {/*@bgen(jjtree) SLASHASSIGN */
  ASTSLASHASSIGN jjtn000 = new ASTSLASHASSIGN(JJTSLASHASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SLASHASSIGN */
        try {
/*@egen*/
	<SLASHASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ANDASSIGN() : {/*@bgen(jjtree) ANDASSIGN */
  ASTANDASSIGN jjtn000 = new ASTANDASSIGN(JJTANDASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ANDASSIGN */
        try {
/*@egen*/
	<ANDASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ORASSIGN() : {/*@bgen(jjtree) ORASSIGN */
  ASTORASSIGN jjtn000 = new ASTORASSIGN(JJTORASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ORASSIGN */
        try {
/*@egen*/
	<ORASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void XORASSIGN() : {/*@bgen(jjtree) XORASSIGN */
  ASTXORASSIGN jjtn000 = new ASTXORASSIGN(JJTXORASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XORASSIGN */
        try {
/*@egen*/
	<XORASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void REMASSIGN() : {/*@bgen(jjtree) REMASSIGN */
  ASTREMASSIGN jjtn000 = new ASTREMASSIGN(JJTREMASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) REMASSIGN */
        try {
/*@egen*/
	<REMASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void LSHIFTASSIGN() : {/*@bgen(jjtree) LSHIFTASSIGN */
  ASTLSHIFTASSIGN jjtn000 = new ASTLSHIFTASSIGN(JJTLSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LSHIFTASSIGN */
        try {
/*@egen*/
	<LSHIFTASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RSIGNEDSHIFTASSIGN() : {/*@bgen(jjtree) RSIGNEDSHIFTASSIGN */
  ASTRSIGNEDSHIFTASSIGN jjtn000 = new ASTRSIGNEDSHIFTASSIGN(JJTRSIGNEDSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RSIGNEDSHIFTASSIGN */
        try {
/*@egen*/
	<RSIGNEDSHIFTASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void RUNSIGNEDSHIFTASSIGN() : {/*@bgen(jjtree) RUNSIGNEDSHIFTASSIGN */
  ASTRUNSIGNEDSHIFTASSIGN jjtn000 = new ASTRUNSIGNEDSHIFTASSIGN(JJTRUNSIGNEDSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RUNSIGNEDSHIFTASSIGN */
        try {
/*@egen*/
	<RUNSIGNEDSHIFTASSIGN>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ENTER() : {/*@bgen(jjtree) ENTER */
  ASTENTER jjtn000 = new ASTENTER(JJTENTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ENTER */
        try {
/*@egen*/
	"\n"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TAB() : {/*@bgen(jjtree) TAB */
  ASTTAB jjtn000 = new ASTTAB(JJTTAB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TAB */
        try {
/*@egen*/
	"\t"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
