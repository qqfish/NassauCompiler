/* Generated By:JJTree&JavaCC: Do not edit this line. NassauToken.java */
/** An Arithmetic Grammar. */

package sjtu.LexicalAnalyse;

public class NassauToken/*@bgen(jjtree)*/implements NassauTokenTreeConstants, NassauTokenConstants {/*@bgen(jjtree)*/
  protected static JJTNassauTokenState jjtree = new JJTNassauTokenState();/** Main entry point. */
        public static void main(String args[]) {
                System.out.println("Reading from standard input...");
                NassauToken t = new NassauToken(System.in);
                try {
                        ASTStart n = t.Start();
                        n.dump();
                        System.out.println("Thank you.");
                } catch (Exception e) {
                        System.out.println("Oops.");
                        System.out.println(e.getMessage());
                        e.printStackTrace();
                }
        }

  static final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONST:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case ELSE:
        case ELIF:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case IMPLEMENT:
        case IMPORT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case PACKAGE:
        case PRIVATE:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case THIS:
        case TRUE:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case RPAREN:
        case LBRACE:
        case RBRACE:
        case LBRACKET:
        case RBRACKET:
        case SEMICOLON:
        case COMMA:
        case DOT:
        case ASSIGN:
        case GT:
        case LT:
        case BANG:
        case TILDE:
        case HOOK:
        case COLON:
        case EQ:
        case LE:
        case GE:
        case NE:
        case SC_OR:
        case SC_AND:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case SLASH:
        case BIT_AND:
        case BIT_OR:
        case XOR:
        case REM:
        case LSHIFT:
        case RSIGNEDSHIFT:
        case RUNSIGNEDSHIFT:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
        case 96:
        case 97:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        TokenUnit();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void TokenUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      BOOLEAN();
      break;
    case BREAK:
      BREAK();
      break;
    case BYTE:
      BYTE();
      break;
    case CHAR:
      CHAR();
      break;
    case CLASS:
      CLASS();
      break;
    case CONST:
      CONST();
      break;
    case CONTINUE:
      CONTINUE();
      break;
    case DO:
      DO();
      break;
    case DOUBLE:
      DOUBLE();
      break;
    case ELSE:
      ELSE();
      break;
    case ELIF:
      ELIF();
      break;
    case FALSE:
      FALSE();
      break;
    case FLOAT:
      FLOAT();
      break;
    case FOR:
      FOR();
      break;
    case IF:
      IF();
      break;
    case IMPLEMENT:
      IMPLEMENT();
      break;
    case IMPORT:
      IMPORT();
      break;
    case INT:
      INT();
      break;
    case LONG:
      LONG();
      break;
    case NEW:
      NEW();
      break;
    case NULL:
      NULL();
      break;
    case PACKAGE:
      PACKAGE();
      break;
    case PRIVATE:
      PRIVATE();
      break;
    case PUBLIC:
      PUBLIC();
      break;
    case RETURN:
      RETURN();
      break;
    case SHORT:
      SHORT();
      break;
    case STATIC:
      STATIC();
      break;
    case THIS:
      THIS();
      break;
    case TRUE:
      TRUE();
      break;
    case VOID:
      VOID();
      break;
    case WHILE:
      WHILE();
      break;
    case INTEGER_LITERAL:
      INTEGER_LITERAL();
      break;
    case FLOATING_POINT_LITERAL:
      FLOATING_POINT_LITERAL();
      break;
    case CHARACTER_LITERAL:
      CHARACTER_LITERAL();
      break;
    case STRING_LITERAL:
      STRING_LITERAL();
      break;
    case IDENTIFIER:
      IDENTIFIER();
      break;
    case LPAREN:
      LPAREN();
      break;
    case RPAREN:
      RPAREN();
      break;
    case LBRACE:
      LBRACE();
      break;
    case RBRACE:
      RBRACE();
      break;
    case LBRACKET:
      LBRACKET();
      break;
    case RBRACKET:
      RBRACKET();
      break;
    case SEMICOLON:
      SEMICOLON();
      break;
    case COMMA:
      COMMA();
      break;
    case DOT:
      DOT();
      break;
    case ASSIGN:
      ASSIGN();
      break;
    case GT:
      GT();
      break;
    case LT:
      LT();
      break;
    case BANG:
      BANG();
      break;
    case TILDE:
      TILDE();
      break;
    case HOOK:
      HOOK();
      break;
    case COLON:
      COLON();
      break;
    case EQ:
      EQ();
      break;
    case LE:
      LE();
      break;
    case GE:
      GE();
      break;
    case NE:
      NE();
      break;
    case SC_OR:
      SC_OR();
      break;
    case SC_AND:
      SC_AND();
      break;
    case INCR:
      INCR();
      break;
    case DECR:
      DECR();
      break;
    case PLUS:
      PLUS();
      break;
    case MINUS:
      MINUS();
      break;
    case STAR:
      STAR();
      break;
    case SLASH:
      SLASH();
      break;
    case BIT_AND:
      BIT_AND();
      break;
    case BIT_OR:
      BIT_OR();
      break;
    case XOR:
      XOR();
      break;
    case REM:
      REM();
      break;
    case LSHIFT:
      LSHIFT();
      break;
    case RSIGNEDSHIFT:
      RSIGNEDSHIFT();
      break;
    case RUNSIGNEDSHIFT:
      RUNSIGNEDSHIFT();
      break;
    case PLUSASSIGN:
      PLUSASSIGN();
      break;
    case MINUSASSIGN:
      MINUSASSIGN();
      break;
    case STARASSIGN:
      STARASSIGN();
      break;
    case SLASHASSIGN:
      SLASHASSIGN();
      break;
    case ANDASSIGN:
      ANDASSIGN();
      break;
    case ORASSIGN:
      ORASSIGN();
      break;
    case XORASSIGN:
      XORASSIGN();
      break;
    case REMASSIGN:
      REMASSIGN();
      break;
    case LSHIFTASSIGN:
      LSHIFTASSIGN();
      break;
    case RSIGNEDSHIFTASSIGN:
      RSIGNEDSHIFTASSIGN();
      break;
    case RUNSIGNEDSHIFTASSIGN:
      RUNSIGNEDSHIFTASSIGN();
      break;
    case 96:
      ENTER();
      break;
    case 97:
      TAB();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BOOLEAN() throws ParseException {
                  /*@bgen(jjtree) BOOLEAN */
  ASTBOOLEAN jjtn000 = new ASTBOOLEAN(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BREAK() throws ParseException {
                /*@bgen(jjtree) BREAK */
  ASTBREAK jjtn000 = new ASTBREAK(JJTBREAK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BYTE() throws ParseException {
               /*@bgen(jjtree) BYTE */
  ASTBYTE jjtn000 = new ASTBYTE(JJTBYTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BYTE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CHAR() throws ParseException {
               /*@bgen(jjtree) CHAR */
  ASTCHAR jjtn000 = new ASTCHAR(JJTCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHAR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CLASS() throws ParseException {
                /*@bgen(jjtree) CLASS */
  ASTCLASS jjtn000 = new ASTCLASS(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CONST() throws ParseException {
                /*@bgen(jjtree) CONST */
  ASTCONST jjtn000 = new ASTCONST(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONST);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CONTINUE() throws ParseException {
                   /*@bgen(jjtree) CONTINUE */
  ASTCONTINUE jjtn000 = new ASTCONTINUE(JJTCONTINUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DO() throws ParseException {
             /*@bgen(jjtree) DO */
  ASTDO jjtn000 = new ASTDO(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DOUBLE() throws ParseException {
                 /*@bgen(jjtree) DOUBLE */
  ASTDOUBLE jjtn000 = new ASTDOUBLE(JJTDOUBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOUBLE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ELSE() throws ParseException {
               /*@bgen(jjtree) ELSE */
  ASTELSE jjtn000 = new ASTELSE(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ELIF() throws ParseException {
               /*@bgen(jjtree) ELIF */
  ASTELIF jjtn000 = new ASTELIF(JJTELIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELIF);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FALSE() throws ParseException {
                /*@bgen(jjtree) FALSE */
  ASTFALSE jjtn000 = new ASTFALSE(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FALSE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FLOAT() throws ParseException {
                /*@bgen(jjtree) FLOAT */
  ASTFLOAT jjtn000 = new ASTFLOAT(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FLOAT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FOR() throws ParseException {
              /*@bgen(jjtree) FOR */
  ASTFOR jjtn000 = new ASTFOR(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IF() throws ParseException {
             /*@bgen(jjtree) IF */
  ASTIF jjtn000 = new ASTIF(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IMPLEMENT() throws ParseException {
                    /*@bgen(jjtree) IMPLEMENT */
  ASTIMPLEMENT jjtn000 = new ASTIMPLEMENT(JJTIMPLEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPLEMENT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IMPORT() throws ParseException {
                 /*@bgen(jjtree) IMPORT */
  ASTIMPORT jjtn000 = new ASTIMPORT(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void INT() throws ParseException {
              /*@bgen(jjtree) INT */
  ASTINT jjtn000 = new ASTINT(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LONG() throws ParseException {
               /*@bgen(jjtree) LONG */
  ASTLONG jjtn000 = new ASTLONG(JJTLONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LONG);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NEW() throws ParseException {
              /*@bgen(jjtree) NEW */
  ASTNEW jjtn000 = new ASTNEW(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NULL() throws ParseException {
               /*@bgen(jjtree) NULL */
  ASTNULL jjtn000 = new ASTNULL(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PACKAGE() throws ParseException {
                  /*@bgen(jjtree) PACKAGE */
  ASTPACKAGE jjtn000 = new ASTPACKAGE(JJTPACKAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PRIVATE() throws ParseException {
                  /*@bgen(jjtree) PRIVATE */
  ASTPRIVATE jjtn000 = new ASTPRIVATE(JJTPRIVATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRIVATE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PUBLIC() throws ParseException {
                 /*@bgen(jjtree) PUBLIC */
  ASTPUBLIC jjtn000 = new ASTPUBLIC(JJTPUBLIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RETURN() throws ParseException {
                 /*@bgen(jjtree) RETURN */
  ASTRETURN jjtn000 = new ASTRETURN(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SHORT() throws ParseException {
                /*@bgen(jjtree) SHORT */
  ASTSHORT jjtn000 = new ASTSHORT(JJTSHORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SHORT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void STATIC() throws ParseException {
                 /*@bgen(jjtree) STATIC */
  ASTSTATIC jjtn000 = new ASTSTATIC(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void THIS() throws ParseException {
               /*@bgen(jjtree) THIS */
  ASTTHIS jjtn000 = new ASTTHIS(JJTTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TRUE() throws ParseException {
               /*@bgen(jjtree) TRUE */
  ASTTRUE jjtn000 = new ASTTRUE(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRUE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void VOID() throws ParseException {
              /*@bgen(jjtree) VOID */
  ASTVOID jjtn000 = new ASTVOID(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void WHILE() throws ParseException {
                /*@bgen(jjtree) WHILE */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void INTEGER_LITERAL() throws ParseException {
                          /*@bgen(jjtree) INTEGER_LITERAL */
  ASTINTEGER_LITERAL jjtn000 = new ASTINTEGER_LITERAL(JJTINTEGER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INTEGER_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void FLOATING_POINT_LITERAL() throws ParseException {
                                 /*@bgen(jjtree) FLOATING_POINT_LITERAL */
  ASTFLOATING_POINT_LITERAL jjtn000 = new ASTFLOATING_POINT_LITERAL(JJTFLOATING_POINT_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FLOATING_POINT_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void CHARACTER_LITERAL() throws ParseException {
                            /*@bgen(jjtree) CHARACTER_LITERAL */
  ASTCHARACTER_LITERAL jjtn000 = new ASTCHARACTER_LITERAL(JJTCHARACTER_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHARACTER_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void STRING_LITERAL() throws ParseException {
                         /*@bgen(jjtree) STRING_LITERAL */
  ASTSTRING_LITERAL jjtn000 = new ASTSTRING_LITERAL(JJTSTRING_LITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING_LITERAL);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void IDENTIFIER() throws ParseException {
                     /*@bgen(jjtree) IDENTIFIER */
  ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LPAREN() throws ParseException {
                 /*@bgen(jjtree) LPAREN */
  ASTLPAREN jjtn000 = new ASTLPAREN(JJTLPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RPAREN() throws ParseException {
                 /*@bgen(jjtree) RPAREN */
  ASTRPAREN jjtn000 = new ASTRPAREN(JJTRPAREN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RPAREN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LBRACE() throws ParseException {
                 /*@bgen(jjtree) LBRACE */
  ASTLBRACE jjtn000 = new ASTLBRACE(JJTLBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RBRACE() throws ParseException {
                 /*@bgen(jjtree) RBRACE */
  ASTRBRACE jjtn000 = new ASTRBRACE(JJTRBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRACE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LBRACKET() throws ParseException {
                   /*@bgen(jjtree) LBRACKET */
  ASTLBRACKET jjtn000 = new ASTLBRACKET(JJTLBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RBRACKET() throws ParseException {
                   /*@bgen(jjtree) RBRACKET */
  ASTRBRACKET jjtn000 = new ASTRBRACKET(JJTRBRACKET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RBRACKET);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SEMICOLON() throws ParseException {
                    /*@bgen(jjtree) SEMICOLON */
  ASTSEMICOLON jjtn000 = new ASTSEMICOLON(JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void COMMA() throws ParseException {
                /*@bgen(jjtree) COMMA */
  ASTCOMMA jjtn000 = new ASTCOMMA(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMMA);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DOT() throws ParseException {
              /*@bgen(jjtree) DOT */
  ASTDOT jjtn000 = new ASTDOT(JJTDOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ASSIGN() throws ParseException {
                 /*@bgen(jjtree) ASSIGN */
  ASTASSIGN jjtn000 = new ASTASSIGN(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void GT() throws ParseException {
             /*@bgen(jjtree) GT */
  ASTGT jjtn000 = new ASTGT(JJTGT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LT() throws ParseException {
             /*@bgen(jjtree) LT */
  ASTLT jjtn000 = new ASTLT(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BANG() throws ParseException {
               /*@bgen(jjtree) BANG */
  ASTBANG jjtn000 = new ASTBANG(JJTBANG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BANG);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TILDE() throws ParseException {
                /*@bgen(jjtree) TILDE */
  ASTTILDE jjtn000 = new ASTTILDE(JJTTILDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TILDE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void HOOK() throws ParseException {
               /*@bgen(jjtree) HOOK */
  ASTHOOK jjtn000 = new ASTHOOK(JJTHOOK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HOOK);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void COLON() throws ParseException {
                /*@bgen(jjtree) COLON */
  ASTCOLON jjtn000 = new ASTCOLON(JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COLON);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void EQ() throws ParseException {
             /*@bgen(jjtree) EQ */
  ASTEQ jjtn000 = new ASTEQ(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQ);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LE() throws ParseException {
             /*@bgen(jjtree) LE */
  ASTLE jjtn000 = new ASTLE(JJTLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void GE() throws ParseException {
             /*@bgen(jjtree) GE */
  ASTGE jjtn000 = new ASTGE(JJTGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void NE() throws ParseException {
             /*@bgen(jjtree) NE */
  ASTNE jjtn000 = new ASTNE(JJTNE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SC_OR() throws ParseException {
                /*@bgen(jjtree) SC_OR */
  ASTSC_OR jjtn000 = new ASTSC_OR(JJTSC_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SC_OR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SC_AND() throws ParseException {
                 /*@bgen(jjtree) SC_AND */
  ASTSC_AND jjtn000 = new ASTSC_AND(JJTSC_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SC_AND);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void INCR() throws ParseException {
               /*@bgen(jjtree) INCR */
  ASTINCR jjtn000 = new ASTINCR(JJTINCR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DECR() throws ParseException {
               /*@bgen(jjtree) DECR */
  ASTDECR jjtn000 = new ASTDECR(JJTDECR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PLUS() throws ParseException {
               /*@bgen(jjtree) PLUS */
  ASTPLUS jjtn000 = new ASTPLUS(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MINUS() throws ParseException {
                /*@bgen(jjtree) MINUS */
  ASTMINUS jjtn000 = new ASTMINUS(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void STAR() throws ParseException {
               /*@bgen(jjtree) STAR */
  ASTSTAR jjtn000 = new ASTSTAR(JJTSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STAR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SLASH() throws ParseException {
                /*@bgen(jjtree) SLASH */
  ASTSLASH jjtn000 = new ASTSLASH(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SLASH);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BIT_AND() throws ParseException {
                  /*@bgen(jjtree) BIT_AND */
  ASTBIT_AND jjtn000 = new ASTBIT_AND(JJTBIT_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BIT_AND);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BIT_OR() throws ParseException {
                 /*@bgen(jjtree) BIT_OR */
  ASTBIT_OR jjtn000 = new ASTBIT_OR(JJTBIT_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BIT_OR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void XOR() throws ParseException {
              /*@bgen(jjtree) XOR */
  ASTXOR jjtn000 = new ASTXOR(JJTXOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(XOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void REM() throws ParseException {
              /*@bgen(jjtree) REM */
  ASTREM jjtn000 = new ASTREM(JJTREM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REM);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LSHIFT() throws ParseException {
                 /*@bgen(jjtree) LSHIFT */
  ASTLSHIFT jjtn000 = new ASTLSHIFT(JJTLSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSHIFT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RSIGNEDSHIFT() throws ParseException {
                       /*@bgen(jjtree) RSIGNEDSHIFT */
  ASTRSIGNEDSHIFT jjtn000 = new ASTRSIGNEDSHIFT(JJTRSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RSIGNEDSHIFT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RUNSIGNEDSHIFT() throws ParseException {
                         /*@bgen(jjtree) RUNSIGNEDSHIFT */
  ASTRUNSIGNEDSHIFT jjtn000 = new ASTRUNSIGNEDSHIFT(JJTRUNSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RUNSIGNEDSHIFT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PLUSASSIGN() throws ParseException {
                     /*@bgen(jjtree) PLUSASSIGN */
  ASTPLUSASSIGN jjtn000 = new ASTPLUSASSIGN(JJTPLUSASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLUSASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void MINUSASSIGN() throws ParseException {
                      /*@bgen(jjtree) MINUSASSIGN */
  ASTMINUSASSIGN jjtn000 = new ASTMINUSASSIGN(JJTMINUSASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUSASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void STARASSIGN() throws ParseException {
                     /*@bgen(jjtree) STARASSIGN */
  ASTSTARASSIGN jjtn000 = new ASTSTARASSIGN(JJTSTARASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STARASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void SLASHASSIGN() throws ParseException {
                      /*@bgen(jjtree) SLASHASSIGN */
  ASTSLASHASSIGN jjtn000 = new ASTSLASHASSIGN(JJTSLASHASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SLASHASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ANDASSIGN() throws ParseException {
                    /*@bgen(jjtree) ANDASSIGN */
  ASTANDASSIGN jjtn000 = new ASTANDASSIGN(JJTANDASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANDASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ORASSIGN() throws ParseException {
                   /*@bgen(jjtree) ORASSIGN */
  ASTORASSIGN jjtn000 = new ASTORASSIGN(JJTORASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ORASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void XORASSIGN() throws ParseException {
                    /*@bgen(jjtree) XORASSIGN */
  ASTXORASSIGN jjtn000 = new ASTXORASSIGN(JJTXORASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(XORASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void REMASSIGN() throws ParseException {
                    /*@bgen(jjtree) REMASSIGN */
  ASTREMASSIGN jjtn000 = new ASTREMASSIGN(JJTREMASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REMASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LSHIFTASSIGN() throws ParseException {
                       /*@bgen(jjtree) LSHIFTASSIGN */
  ASTLSHIFTASSIGN jjtn000 = new ASTLSHIFTASSIGN(JJTLSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSHIFTASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RSIGNEDSHIFTASSIGN() throws ParseException {
                             /*@bgen(jjtree) RSIGNEDSHIFTASSIGN */
  ASTRSIGNEDSHIFTASSIGN jjtn000 = new ASTRSIGNEDSHIFTASSIGN(JJTRSIGNEDSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RSIGNEDSHIFTASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void RUNSIGNEDSHIFTASSIGN() throws ParseException {
                               /*@bgen(jjtree) RUNSIGNEDSHIFTASSIGN */
  ASTRUNSIGNEDSHIFTASSIGN jjtn000 = new ASTRUNSIGNEDSHIFTASSIGN(JJTRUNSIGNEDSHIFTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ENTER() throws ParseException {
                /*@bgen(jjtree) ENTER */
  ASTENTER jjtn000 = new ASTENTER(JJTENTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(96);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TAB() throws ParseException {
              /*@bgen(jjtree) TAB */
  ASTTAB jjtn000 = new ASTTAB(JJTTAB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(97);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NassauTokenTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff00,0xffffff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffce8ff,0xfffce8ff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x3,0x3,};
   }

  /** Constructor with InputStream. */
  public NassauToken(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NassauToken(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NassauTokenTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NassauToken(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NassauTokenTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NassauToken(NassauTokenTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NassauTokenTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[98];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 98; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
