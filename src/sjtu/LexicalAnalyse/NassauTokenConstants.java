/* Generated By:JJTree&JavaCC: Do not edit this line. NassauTokenConstants.java */

package sjtu.LexicalAnalyse;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NassauTokenConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BOOLEAN = 8;
  /** RegularExpression Id. */
  int BREAK = 9;
  /** RegularExpression Id. */
  int BYTE = 10;
  /** RegularExpression Id. */
  int CHAR = 11;
  /** RegularExpression Id. */
  int CLASS = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int DO = 15;
  /** RegularExpression Id. */
  int DOUBLE = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int ELIF = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int FLOAT = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int IMPLEMENT = 23;
  /** RegularExpression Id. */
  int IMPORT = 24;
  /** RegularExpression Id. */
  int INT = 25;
  /** RegularExpression Id. */
  int LONG = 26;
  /** RegularExpression Id. */
  int NEW = 27;
  /** RegularExpression Id. */
  int NULL = 28;
  /** RegularExpression Id. */
  int PACKAGE = 29;
  /** RegularExpression Id. */
  int PRIVATE = 30;
  /** RegularExpression Id. */
  int PUBLIC = 31;
  /** RegularExpression Id. */
  int RETURN = 32;
  /** RegularExpression Id. */
  int SHORT = 33;
  /** RegularExpression Id. */
  int STATIC = 34;
  /** RegularExpression Id. */
  int THIS = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int VOID = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 39;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 40;
  /** RegularExpression Id. */
  int HEX_LITERAL = 41;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 42;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 43;
  /** RegularExpression Id. */
  int EXPONENT = 44;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;
  /** RegularExpression Id. */
  int LETTER = 48;
  /** RegularExpression Id. */
  int DIGIT = 49;
  /** RegularExpression Id. */
  int LPAREN = 50;
  /** RegularExpression Id. */
  int RPAREN = 51;
  /** RegularExpression Id. */
  int LBRACE = 52;
  /** RegularExpression Id. */
  int RBRACE = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int RBRACKET = 55;
  /** RegularExpression Id. */
  int SEMICOLON = 56;
  /** RegularExpression Id. */
  int COMMA = 57;
  /** RegularExpression Id. */
  int DOT = 58;
  /** RegularExpression Id. */
  int ASSIGN = 59;
  /** RegularExpression Id. */
  int GT = 60;
  /** RegularExpression Id. */
  int LT = 61;
  /** RegularExpression Id. */
  int BANG = 62;
  /** RegularExpression Id. */
  int TILDE = 63;
  /** RegularExpression Id. */
  int HOOK = 64;
  /** RegularExpression Id. */
  int COLON = 65;
  /** RegularExpression Id. */
  int EQ = 66;
  /** RegularExpression Id. */
  int LE = 67;
  /** RegularExpression Id. */
  int GE = 68;
  /** RegularExpression Id. */
  int NE = 69;
  /** RegularExpression Id. */
  int SC_OR = 70;
  /** RegularExpression Id. */
  int SC_AND = 71;
  /** RegularExpression Id. */
  int INCR = 72;
  /** RegularExpression Id. */
  int DECR = 73;
  /** RegularExpression Id. */
  int PLUS = 74;
  /** RegularExpression Id. */
  int MINUS = 75;
  /** RegularExpression Id. */
  int STAR = 76;
  /** RegularExpression Id. */
  int SLASH = 77;
  /** RegularExpression Id. */
  int BIT_AND = 78;
  /** RegularExpression Id. */
  int BIT_OR = 79;
  /** RegularExpression Id. */
  int XOR = 80;
  /** RegularExpression Id. */
  int REM = 81;
  /** RegularExpression Id. */
  int LSHIFT = 82;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 83;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 84;
  /** RegularExpression Id. */
  int PLUSASSIGN = 85;
  /** RegularExpression Id. */
  int MINUSASSIGN = 86;
  /** RegularExpression Id. */
  int STARASSIGN = 87;
  /** RegularExpression Id. */
  int SLASHASSIGN = 88;
  /** RegularExpression Id. */
  int ANDASSIGN = 89;
  /** RegularExpression Id. */
  int ORASSIGN = 90;
  /** RegularExpression Id. */
  int XORASSIGN = 91;
  /** RegularExpression Id. */
  int REMASSIGN = 92;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 93;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 94;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 95;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "<token of kind 3>",
    "<token of kind 4>",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"elif\"",
    "\"false\"",
    "\"float\"",
    "\"for\"",
    "\"if\"",
    "\"implement\"",
    "\"import\"",
    "\"int\"",
    "\"long\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"\\n\"",
    "\"\\t\"",
  };

}
