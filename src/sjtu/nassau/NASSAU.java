/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sjtu.nassau;

//import java.awt.event.ActionEvent;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import sjtu.LexicalAnalyse.LexicalUsage;
import sjtu.ParseAnalyse.ParseAnalyse;

import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import org.fife.ui.rtextarea.SearchContext;
import org.fife.ui.rtextarea.SearchEngine;
import sjtu.LexicalAnalyse.ParseException;
import sjtu.ParseAnalyse.ASTStart;
import sjtu.ParseAnalyse.SimpleNode;
import sjtu.SemanticAnalyse.SemanticAnalyse;
import sjtu.SemanticAnalyse.SemanticException;

//import sjtu.image.*;
//import java.util.Date;
/**
 *
 * @author hp
 */
public class NASSAU extends javax.swing.JFrame {

    /**
     * Creates new form NASSAU
     */
    public NASSAU() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        tabTable = new javax.swing.JTabbedPane();
        codeArea = new RSyntaxTextArea();
        code = new RTextScrollPane(codeArea);
        consoleSys = new javax.swing.JScrollPane();
        consoles = new javax.swing.JTextArea();
        lexical = new javax.swing.JScrollPane();
        lexAna = new javax.swing.JTextArea();
        syntax = new javax.swing.JScrollPane();
        synAna = new javax.swing.JTree();
        semantic = new javax.swing.JScrollPane();
        semAna = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        create = new javax.swing.JMenuItem();
        sep1 = new javax.swing.JPopupMenu.Separator();
        save = new javax.swing.JMenuItem();
        saveas = new javax.swing.JMenuItem();
        sep2 = new javax.swing.JPopupMenu.Separator();
        quit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        analyzer = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        gethelp = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        //Search and Find
        /*JToolBar toolBar = new JToolBar();
         searchField = new JTextField(30);
         toolBar.add(searchField);
        
         final JButton nextButton = new JButton("Find Next");
         nextButton.setActionCommand("FindNext");
         nextButton.addActionListener(this);
         toolBar.add(nextButton);
         searchField.addActionListener(new ActionListener() {
         public void findActionPerformed(ActionEvent e) {
         nextButton.doClick(0);
         }
         });
         JButton prevButton = new JButton("Find Previous");
         prevButton.setActionCommand("FindPrev");
         prevButton.addActionListener(this);
         toolBar.add(prevButton);
         regexCB = new JCheckBox("Regex");
         toolBar.add(regexCB);
         matchCaseCB = new JCheckBox("Match Case");
         toolBar.add(matchCaseCB);
         code.add(toolBar, BorderLayout.SOUTH);*/
        //Search and Find end

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nassau Compiler");
        setAutoRequestFocus(false);
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.GridLayout(1, 10));

        tabTable.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        tabTable.setToolTipText("");

        codeArea.setColumns(20);
        codeArea.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        codeArea.setRows(5);

        codeArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        codeArea.setCodeFoldingEnabled(true);

        code.setViewportView(codeArea);
        code.setFoldIndicatorEnabled(true);

        tabTable.addTab("  Code   ", code);

        consoles.setEditable(false);
        consoles.setColumns(20);
        consoles.setRows(5);
        consoleSys.setViewportView(consoles);

        tabTable.addTab("  Console  ", consoleSys);

        lexAna.setEditable(false);
        lexAna.setColumns(20);
        lexAna.setRows(5);
        lexical.setViewportView(lexAna);

        tabTable.addTab("  Lexical Analyzer  ", lexical);

        syntax.setViewportView(synAna);

        tabTable.addTab("  Syntax Analyzer  ", syntax);

        semAna.setEditable(false);
        semAna.setColumns(20);
        semAna.setRows(5);
        semantic.setViewportView(semAna);

        tabTable.add(" Sematic Analyzer  ", semantic);

        Icon leafIcon = new ImageIcon("Leaf.png");
        renderer.setLeafIcon(leafIcon);
        renderer.setClosedIcon(leafIcon);
        renderer.setOpenIcon(leafIcon);

        synAna.setCellRenderer(renderer);
        synAna.setEditable(true);

        getContentPane().add(tabTable);
        tabTable.getAccessibleContext().setAccessibleName("  Code  ");

        menu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        file.setText("  File  ");

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("  Create New File  ");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        file.add(open);

        create.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        create.setText("  Open Existing File  ");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });
        file.add(create);
        file.add(sep1);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("  Save  ");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);

        saveas.setText("  Save as ..  ");
        saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasActionPerformed(evt);
            }
        });
        file.add(saveas);
        file.add(sep2);

        quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        quit.setText("  Quit  ");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        file.add(quit);

        menu.add(file);

        edit.setText("  Edit  ");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        analyzer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        analyzer.setText("  Analyzer  ");
        analyzer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzerActionPerformed(evt);
            }
        });
        edit.add(analyzer);

        menu.add(edit);

        help.setText("  Help  ");

        gethelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        gethelp.setText("  Get Help  ");
        gethelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gethelpActionPerformed(evt);
            }
        });
        help.add(gethelp);

        about.setText("  About  ");
        help.add(about);

        menu.add(help);

        setJMenuBar(menu);

        Image image = Toolkit.getDefaultToolkit().getImage("D:/Nassau.png");
        setIconImage(image);

        pack();
    }// </editor-fold>

    public void console(String str) {
        consoles.append(str);
    }

    /*public void findActionPerformed(ActionEvent e) {

     // "FindNext" => search forward, "FindPrev" => search backward
     String command = e.getActionCommand();
     boolean forward = "FindNext".equals(command);

     // Create an object defining our search parameters.
     SearchContext context = new SearchContext();
     String text = searchField.getText();
     if (text.length() == 0) {
     return;
     }
     context.setSearchFor(text);
     context.setMatchCase(matchCaseCB.isSelected());
     context.setRegularExpression(regexCB.isSelected());
     context.setSearchForward(forward);
     context.setWholeWord(false);

     boolean found = SearchEngine.find(codeArea, context);
     if (!found) {
     JOptionPane.showMessageDialog(this, "Text not found");
     }
     }*/
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (evt.getSource() == save) {
            FileWriter fw = null;
            try {
                //保存
                File file = null;
                //写入文件 
                if (filename == null || filename.trim().length() == 0) {
                    JFileChooser dlg = new JFileChooser();
                    int result = dlg.showOpenDialog(this);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        file = dlg.getSelectedFile();
                        filename = file.getAbsolutePath();
                    }
                } else {
                    file = new File(filename);
                }
                fw = new FileWriter(file, true);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                //写入数据对象
                pw.print(codeArea.getText());
                bw.close();
                pw.close();
                fw.close();
                //consoles.append(filename)
                consoles.append(" Saving " + filename + "\n" + "\n");
            } catch (IOException ex) {
                Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fw.close();
                } catch (IOException ex) {
                    Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void openActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (evt.getSource() == open) { //新建
            consoles.append("  Create New  ");
            filename = null;
            codeArea.setText("");
        }
    }

    private void createActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (evt.getSource() == create) {//打开文件 
            //选择文件 
            JFileChooser dlg = new JFileChooser();
            int result = dlg.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = dlg.getSelectedFile();
                    filename = file.getAbsolutePath();

                    //读取文件 
                    FileReader fr = new FileReader(filename);
                    BufferedReader br = new BufferedReader(fr);
                    String str = "";
                    while (br.ready()) {
                        int c = br.read();
                        str += (char) c;
                    }
                    codeArea.setText(str);
                    consoles.append(" Opening  " + filename + "\n");
                    br.close();
                    fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void saveasActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (evt.getSource() == saveas) {//另存为
            //选择文件 
            JFileChooser dlg = new JFileChooser();
            int result = dlg.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                FileWriter fw = null;
                try {
                    File file = dlg.getSelectedFile();
                    fw = new FileWriter(file, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    PrintWriter pw = new PrintWriter(bw);
                    pw.print(codeArea.getText());
                    bw.close();
                    pw.close();
                    fw.close();
                    consoles.append(" Saving  " + filename + "\n");
                } catch (IOException ex) {
                    Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fw.close();
                    } catch (IOException ex) {
                        Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (evt.getSource() == quit) {//退出
            System.exit(0);
        }
    }

    private void analyzerActionPerformed(java.awt.event.ActionEvent evt) {

        try {
            LexicalUsage la = new LexicalUsage();
            String str_la = codeArea.getText();
            InputStream input_la = new ByteArrayInputStream(str_la.getBytes());
            String la_result;
            la_result = la.analyse(input_la);
            lexAna.setText("");
            lexAna.append("\n" + "Lexical Analysis Result :\n" + la_result + "\n");
        } catch (ParseException ex) {
            try {
                consoles.append("\nLexical error:" + ex.getMessage() + "\n");
                int position1 = codeArea.getLineStartOffset(ex.getBeginLine() - 2);
                int position2 = codeArea.getLineStartOffset(ex.getEndLine() - 2);
                System.out.println((position1 + ex.getBeginColumn()) + " " + (position2 + ex.getEndColumn()));
                codeArea.select(position1 + ex.getBeginColumn() - 2, position2 + ex.getEndColumn() - 1);
            } catch (BadLocationException ex1) {
                Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }

        ASTStart start = null;
        try {
            ParseAnalyse pa = new ParseAnalyse();
            String str_pa = codeArea.getText();
            InputStream input_pa = new ByteArrayInputStream(str_pa.getBytes());
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Start");
            start = pa.analyse(input_pa, root);
            synAna.setModel(new javax.swing.tree.DefaultTreeModel(root));
            synAna.updateUI();
            consoles.append("\n" + "Syntax Analysis Result :\n success \n");
        } catch (sjtu.ParseAnalyse.ParseException ex) {
            try {
                consoles.append("\nParse error:" + ex.getMessage() + "\n");
                int position1 = codeArea.getLineStartOffset(ex.getBeginLine() - 2);
                int position2 = codeArea.getLineStartOffset(ex.getEndLine() - 2);
                System.out.println((position1 + ex.getBeginColumn()) + " " + (position2 + ex.getEndColumn()));
                codeArea.select(position1 + ex.getBeginColumn() - 2, position2 + ex.getEndColumn() - 1);
            } catch (BadLocationException ex1) {
                Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }


        if (start != null) {
            try {
                SemanticAnalyse se = new SemanticAnalyse(start);
                String result_se = se.run(semAna);
                semAna.updateUI();
                consoles.append("\n" + "Semantic Analysis Result :\n" + result_se + "\n");
            } catch (SemanticException ex) {
                try {
                    consoles.append("\nSemantic error:" + ex.getMessage() + "\n");
                    int position1 = codeArea.getLineStartOffset(ex.getBeginLine() - 2);
                    int position2 = codeArea.getLineStartOffset(ex.getEndLine() - 2);
                    System.out.println((position1 + ex.getBeginColumn()) + " " + (position2 + ex.getEndColumn()));
                    codeArea.select(position1 + ex.getBeginColumn() - 2, position2 + ex.getEndColumn() - 1);
                } catch (BadLocationException ex1) {
                    Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (IOException ex) {
                Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void editActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void gethelpActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NASSAU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NASSAU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NASSAU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NASSAU.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(new com.sun.java.swing.plaf.windows.WindowsLookAndFeel());
                    new NASSAU().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(NASSAU.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem analyzer;
    private RTextScrollPane code;
    private RSyntaxTextArea codeArea;
    private javax.swing.JScrollPane consoleSys;
    private javax.swing.JTextArea consoles;
    private javax.swing.JMenuItem create;
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem gethelp;
    private javax.swing.JMenu help;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea lexAna;
    private javax.swing.JScrollPane lexical;
    private javax.swing.JScrollPane semantic;
    private javax.swing.JTextArea semAna;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem quit;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem saveas;
    private javax.swing.JPopupMenu.Separator sep1;
    private javax.swing.JPopupMenu.Separator sep2;
    private javax.swing.JTree synAna;
    private javax.swing.JScrollPane syntax;
    private javax.swing.JTabbedPane tabTable;
    // End of variables declaration
    private String filename;
    //private Date currentTime;
    DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
    /*private static final long serialVersionUID = 1L;

     private JTextField searchField;
     private JCheckBox regexCB;
     private JCheckBox matchCaseCB;*/
}
