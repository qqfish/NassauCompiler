package sjtu.ParseAnalyse;
/* Generated By:JJTree: Do not edit this line. ./NassauTreeConstants.java */

public interface NassauTreeConstants
{
  public int JJTSTART = 0;
  public int JJTVOID = 1;
  public int JJTPACKAGEDECLARATION = 2;
  public int JJTIMPORTDECLARATION = 3;
  public int JJTCLASSDECLARATION = 4;
  public int JJTSTATICINITIALIZER = 5;
  public int JJTCONSTRUCTORDECLARATION = 6;
  public int JJTFORMALPARAMETER = 7;
  public int JJTFIELDDECLARATION = 8;
  public int JJTFIELDMODIFIER = 9;
  public int JJTASSIGNMENTDECLARATOR = 10;
  public int JJTARRAYDECLARATOR = 11;
  public int JJTMETHODDECLARATION = 12;
  public int JJTMETHODMODIFIER = 13;
  public int JJTVOIDTYPE = 14;
  public int JJTCLASSIMPLEMENT = 15;
  public int JJTCONSTRUCTORIMPLEMENT = 16;
  public int JJTCLASSMETHODIMPLEMENT = 17;
  public int JJTBLOCK = 18;
  public int JJTLOCALVARIABLEDECLARATIONSTATEMENT = 19;
  public int JJTBREAKSTATEMENT = 20;
  public int JJTCONTINUESTATEMENT = 21;
  public int JJTRETURNSTATEMENT = 22;
  public int JJTPRINTSTATEMENT = 23;
  public int JJTIFSTATEMENT = 24;
  public int JJTFORSTATEMENT = 25;
  public int JJTFORINIT = 26;
  public int JJTFORUPDATE = 27;
  public int JJTWHILESTATEMENT = 28;
  public int JJTDOSTATEMENT = 29;
  public int JJTARRAYTYPE = 30;
  public int JJTTYPE = 31;
  public int JJTASSIGNMENT = 32;
  public int JJTARRAYPRIMARYSUFFIX = 33;
  public int JJTASSIGNMENTOPERATOR = 34;
  public int JJTCONDITONALOREXPRESSION = 35;
  public int JJTCONDITIONALANDEXPRESSION = 36;
  public int JJTINCLUSIVEOREXPRESSION = 37;
  public int JJTEXCLUSIVEOREXPRESSION = 38;
  public int JJTANDEXPRESSION = 39;
  public int JJTEQUALITYEXPRESSION = 40;
  public int JJTNOTEQUALITYEXPRESSION = 41;
  public int JJTLESSRELATIONALEXPRESSION = 42;
  public int JJTBIGGERRELATIONALEXPRESSION = 43;
  public int JJTLESSEQRELATIONALEXPRESSION = 44;
  public int JJTBIGGEREQRELATIONALEXPRESSION = 45;
  public int JJTLEFTSHIFTEXPRESSION = 46;
  public int JJTRIGHTSHIFTEXPRESSION = 47;
  public int JJTLEFTTHREESHIFTEXPRESSION = 48;
  public int JJTPLUSADDITIVEEXPRESSION = 49;
  public int JJTMINUSADDITIVEEXPRESSION = 50;
  public int JJTMULTIPLEMULTIPLICATIVEEXPRESSION = 51;
  public int JJTDIVIDEMULTIPLICATIVEEXPRESSION = 52;
  public int JJTREMAINMULTIPLICATIVEEXPRESSION = 53;
  public int JJTPREDECREMENTEXPRESSION = 54;
  public int JJTPREINCREMENTEXPRESSION = 55;
  public int JJTOPPOSITEEXPRESSION = 56;
  public int JJTNOTEXPRESSION = 57;
  public int JJTPOSTDECREMENTEXPRESSION = 58;
  public int JJTPOSTINCREMENTEXPRESSION = 59;
  public int JJTEXPRESSIONPRIMARYPREFIX = 60;
  public int JJTCALLFUNTION = 61;
  public int JJTTHISPRIMARYPREFIX = 62;
  public int JJTCLASSINSTANCECREATIONEXPRESSION = 63;
  public int JJTARRAYDIMENSION = 64;
  public int JJTARGUMENTLIST = 65;
  public int JJTNAME = 66;
  public int JJTINTEGERLITERAL = 67;
  public int JJTFLOATINGPOINTLITERAL = 68;
  public int JJTBOOLEANLITERAL = 69;
  public int JJTCHARACTERLITERAL = 70;
  public int JJTSTRINGLITERAL = 71;
  public int JJTNULLLITERAL = 72;
  public int JJTIDENTIFIER = 73;


  public String[] jjtNodeName = {
    "Start",
    "void",
    "PackageDeclaration",
    "ImportDeclaration",
    "ClassDeclaration",
    "StaticInitializer",
    "ConstructorDeclaration",
    "FormalParameter",
    "FieldDeclaration",
    "FieldModifier",
    "AssignmentDeclarator",
    "ArrayDeclarator",
    "MethodDeclaration",
    "MethodModifier",
    "voidType",
    "ClassImplement",
    "ConstructorImplement",
    "ClassMethodImplement",
    "Block",
    "LocalVariableDeclarationStatement",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
    "PrintStatement",
    "IfStatement",
    "ForStatement",
    "ForInit",
    "ForUpdate",
    "WhileStatement",
    "DoStatement",
    "ArrayType",
    "Type",
    "Assignment",
    "ArrayPrimarySuffix",
    "AssignmentOperator",
    "ConditonalOrExpression",
    "ConditionalAndExpression",
    "InclusiveOrExpression",
    "ExclusiveOrExpression",
    "AndExpression",
    "EqualityExpression",
    "NotEqualityExpression",
    "LessRelationalExpression",
    "BiggerRelationalExpression",
    "LessEqRelationalExpression",
    "BiggerEqRelationalExpression",
    "LeftShiftExpression",
    "RightShiftExpression",
    "LeftThreeShiftExpression",
    "PlusAdditiveExpression",
    "MinusAdditiveExpression",
    "MultipleMultiplicativeExpression",
    "DivideMultiplicativeExpression",
    "RemainMultiplicativeExpression",
    "PredecrementExpression",
    "PreincrementExpression",
    "OppositeExpression",
    "NotExpression",
    "PostdecrementExpression",
    "PostincrementExpression",
    "ExpressionPrimaryPrefix",
    "CallFuntion",
    "ThisPrimaryPrefix",
    "ClassInstanceCreationExpression",
    "ArrayDimension",
    "ArgumentList",
    "Name",
    "IntegerLiteral",
    "FloatingPointLiteral",
    "BooleanLiteral",
    "CharacterLiteral",
    "StringLiteral",
    "NullLiteral",
    "Identifier",
  };
}
